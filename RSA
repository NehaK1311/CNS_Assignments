#include <iostream>
#include <bits\stdc++.h>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

// Function to compute GCD using Euclidean algorithm
long long gcd(long long a, long long b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

// Function to compute (base^exponent) % mod using modular exponentiation
long long power(long long base, long long exponent, long long mod) {
    if (mod == 1)
        return 0;
    long long result = 1;
    base = base % mod;
    while (exponent > 0) {
        if (exponent & 1)  // If exponent is odd
            result = (result * base) % mod;
        exponent = exponent >> 1;  // exponent = exponent / 2
        base = (base * base) % mod;
    }
    return result;
}

// Function to check if a number is prime
bool isPrime(long long num) {
    if (num < 2)
        return false;
    for (long long i = 2; i <= sqrt((double)num); ++i) {
        if (num % i == 0)
            return false;
    }
    return true;
}

// Function to compute the modular inverse using Extended Euclidean algorithm
long long modInverse(long long e, long long phi) {
    long long m0 = phi, t, q;
    long long x0 = 0, x1 = 1;

    if (phi == 1)
        return 0;

    while (e > 1) {
        // q is quotient
        q = e / phi;
        t = phi;

        // phi is remainder now, process same as Euclidean algorithm
        phi = e % phi;
        e = t;

        t = x0;

        x0 = x1 - q * x0;
        x1 = t;
    }

    // Make x1 positive
    if (x1 < 0)
        x1 += m0;

    return x1;
}

// Function to generate a random prime number within a range
long long generatePrime(long long lower, long long upper) {
    while (true) {
        long long num = rand() % (upper - lower + 1) + lower;
        if (isPrime(num))
            return num;
    }
}

int main() {
    srand(time(0));  // Seed for random number generation

    // Step 1: Key Generation
    std::cout << "=== RSA Key Generation ===\n";

    // Generate two distinct prime numbers p and q
    long long p = generatePrime(100, 300);
    long long q;
    do {
        q = generatePrime(100, 300);
    } while (q == p);

    std::cout << "Prime p: " << p << "\n";
    std::cout << "Prime q: " << q << "\n";

    // Compute n = p * q
    long long n = p * q;
    std::cout << "Modulus n = p * q: " << n << "\n";

    // Compute Euler's Totient Function phi(n) = (p-1)*(q-1)
    long long phi = (p - 1) * (q - 1);
    std::cout << "Euler's Totient (phi): " << phi << "\n";

    // Choose public exponent e
    long long e;
    while (true) {
        e = rand() % (phi - 2) + 2;  // e in [2, phi-1]
        if (gcd(e, phi) == 1)
            break;
    }
    std::cout << "Public exponent e: " << e << "\n";

    // Compute private exponent d
    long long d = modInverse(e, phi);
    std::cout << "Private exponent d: " << d << "\n";

    // Public and Private Keys
    std::cout << "\nPublic Key: (" << e << ", " << n << ")\n";
    std::cout << "Private Key: (" << d << ", " << n << ")\n";

    // Step 2: Encryption
    std::cout << "\n=== RSA Encryption ===\n";
    std::string message;
    std::cout << "Enter message to encrypt (uppercase letters only): ";
    std::cin >> message;

    // Convert message to ciphertext
    std::cout << "Encrypted message: ";
    for (char c : message) {
        long long m = (long long)c;  // Convert char to ASCII
        long long ciph = power(m, e, n);
        std::cout << ciph << " ";
    }
    std::cout << "\n";

    // Step 3: Decryption
    std::cout << "\n=== RSA Decryption ===\n";
    std::cout << "Decrypted message: ";
    // Assuming the ciphertext is known as the list of encrypted values
    // In practice, ciphertext would be transmitted or stored
    // Here, we'll re-encrypt and then decrypt for demonstration
    for (char c : message) {
        long long m = (long long)c;
        long long ciph = power(m, e, n);
        long long dec = power(ciph, d, n);
        std::cout << (char)dec;
    }
    std::cout << "\n";

    return 0;
}
